<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>编程札记 Programming Notes</title>
    <link>https://example.com/</link>
    <description>Recent content on 编程札记 Programming Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>&amp;copy; Copyright 2017 ttimehc@gmail.com</copyright>
    <lastBuildDate>Wed, 10 Feb 2021 02:43:06 +0800</lastBuildDate>
    
	<atom:link href="https://example.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How to Implement Red-Black Trees Deletion</title>
      <link>https://example.com/posts/how-to-implement-red-black-trees-deletion/</link>
      <pubDate>Wed, 10 Feb 2021 02:43:06 +0800</pubDate>
      
      <guid>https://example.com/posts/how-to-implement-red-black-trees-deletion/</guid>
      <description>写了篇介绍红黑树删除算法的文章，发在 Medium 上
How to Implement Red-Black Trees Deletion</description>
    </item>
    
    <item>
      <title>Go Error 的设计哲学</title>
      <link>https://example.com/posts/the-philosophy-of-go-error-handling/</link>
      <pubDate>Sat, 05 Dec 2020 17:36:56 +0800</pubDate>
      
      <guid>https://example.com/posts/the-philosophy-of-go-error-handling/</guid>
      <description>&lt;p&gt;最近阅读了不少关于 Go 错误处理的材料和讨论，总结出 Go Error 的设计哲学主要有两点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;处理所有潜在的错误&lt;/li&gt;
&lt;li&gt;Errors Are Value&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Go 对错误处理的最初设计和后续优化方案，以及编程过程中处理错误的各种方法，基本都是围绕着这些理念展开的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Unix I/O 主要模型介绍</title>
      <link>https://example.com/posts/unix-io-introduction/</link>
      <pubDate>Thu, 24 Sep 2020 00:00:00 +0800</pubDate>
      
      <guid>https://example.com/posts/unix-io-introduction/</guid>
      <description>&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;5 种 I/O 模型及一些示例&lt;/li&gt;
&lt;li&gt;目前主流的 I/O 方案 epoll / kqueue&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Go 网络编程的实现</title>
      <link>https://example.com/posts/golang-network-programming-implementation/</link>
      <pubDate>Wed, 22 Jul 2020 00:59:17 +0000</pubDate>
      
      <guid>https://example.com/posts/golang-network-programming-implementation/</guid>
      <description>&lt;p&gt;提要：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TCP 服务端、客户端示例&lt;/li&gt;
&lt;li&gt;Network system calls&lt;/li&gt;
&lt;li&gt;TCP 编程是如何实现的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Go 网络编程主要通过 net 包（package）实现，它支持 TCP/IP, UDP, domain name resolution, Unix domain sockets 等连接，此外，还通过 net/http ，net/rpc 等提供了 http，rpc 等主流应用层的连接协议。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go 源码分析：scheduler 工作流程</title>
      <link>https://example.com/posts/go-scheduler-introduction/</link>
      <pubDate>Mon, 08 Jun 2020 13:02:44 +0000</pubDate>
      
      <guid>https://example.com/posts/go-scheduler-introduction/</guid>
      <description>&lt;p&gt;&lt;em&gt;注：本文涉及的源码为 go 1.13 版本&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;最近一直在看 Go 调度器的源码，查了不少资料，对 goroutine 的调度过程有了一些了解，也对 Go 如何支撑高并发、并行计算有个大概的认识。&lt;/p&gt;
&lt;p&gt;Go 调度器（scheduler）负责把各个 goroutine 分配到相应的操作系统线程 (OS thread )上执行，是 Go runtime 的两大组成部分之一，另一个是内存分配/垃圾回收（memory allocator/garbage collector）&lt;a href=&#34;https://www.quora.com/How-does-the-Go-runtime-work-What-does-it-consist-of-What-functionalities-does-it-provide-and-what-can-be-expected-from-a-developer-perspective&#34;&gt;1&lt;/a&gt; 。&lt;/p&gt;
&lt;p&gt;调度器相关的代码主要在 &lt;code&gt;runtime &lt;/code&gt; 的 &lt;code&gt;proc.go&lt;/code&gt; ， &lt;code&gt;runtime1.go&lt;/code&gt; ， &lt;code&gt;runtime2.go&lt;/code&gt; 等几个文件，此外还有一些 Go 汇编代码，这些代码大部分在 2015 年成形，至今没有大的修改，目前看来还是比较稳定的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>一个错误洗牌算法的分析</title>
      <link>https://example.com/posts/analysis-the-bias-of-a-naive-shuffle-algorithm-17-18-10-050/</link>
      <pubDate>Fri, 03 Jan 2020 00:28:45 +0000</pubDate>
      
      <guid>https://example.com/posts/analysis-the-bias-of-a-naive-shuffle-algorithm-17-18-10-050/</guid>
      <description>&lt;p&gt;将一个长度为 n 的有序数组，重新打乱，随机排序，它算法实现被称作洗牌算法，得名于它的典型应用，扑克牌洗牌。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>利用 swagger 管理 API 开发</title>
      <link>https://example.com/posts/introduction-to-swagger-a-tool-simplify-your-api-development/</link>
      <pubDate>Wed, 20 Nov 2019 21:48:25 +0000</pubDate>
      
      <guid>https://example.com/posts/introduction-to-swagger-a-tool-simplify-your-api-development/</guid>
      <description>&lt;p&gt;swagger 可以通过 yaml 文件自动生成 api 文档，客户端代码等，减少了许多繁琐的工作和前后端沟通，从而提高开发效率。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>构建 Golang Web 应用的两种方法</title>
      <link>https://example.com/posts/how-to-build-your-golang-web-app/</link>
      <pubDate>Fri, 01 Nov 2019 18:04:46 +0000</pubDate>
      
      <guid>https://example.com/posts/how-to-build-your-golang-web-app/</guid>
      <description>&lt;p&gt;对前后端分离的 web 项目，golang 后端可以以两种方式提供前端静态文件的访问：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用 &lt;code&gt;http.FileServer&lt;/code&gt; 提供静态文件服务&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;go-bindata-assetfs&lt;/code&gt; 将前端静态文件打包成二进制数据，和后端构建到一起&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>gRPC 入门，如何用 go 开发 grpc 服务端/客户端应用</title>
      <link>https://example.com/posts/grpc-go-a-working-demo/</link>
      <pubDate>Tue, 20 Aug 2019 14:37:37 +0000</pubDate>
      
      <guid>https://example.com/posts/grpc-go-a-working-demo/</guid>
      <description>&lt;p&gt;demo 的代码仓库：&lt;a href=&#34;https://github.com/chasecs/grpc-sorter&#34;&gt;github.com/chasecs/grpc-sorter&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;一基础知识&#34;&gt;一、基础知识&lt;/h2&gt;
&lt;h3 id=&#34;rpc&#34;&gt;rpc&lt;/h3&gt;
&lt;p&gt;RPC 是一种用于主要用于服务器通讯的 API 协议，于 2005 年左右发布，在它出现之前，常用的服务器 API 协议是 REST 和 SOAP 。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>go channel，buffered 与 unbuffered 的区别</title>
      <link>https://example.com/posts/golang-channel-buffered-or-unbuffered/</link>
      <pubDate>Mon, 19 Aug 2019 01:23:29 +0000</pubDate>
      
      <guid>https://example.com/posts/golang-channel-buffered-or-unbuffered/</guid>
      <description>&lt;p&gt;go 通过 goroutine 实现并发，而不同的 goroutine 之间需要通过 channel 来通讯，否则就是两段各行其是的代码。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>redis 的使用场景及其数据类型</title>
      <link>https://example.com/posts/redis-usage-and-its-datatype/</link>
      <pubDate>Fri, 09 Aug 2019 16:02:43 +0000</pubDate>
      
      <guid>https://example.com/posts/redis-usage-and-its-datatype/</guid>
      <description>&lt;p&gt;redis 的使用场景总结有以下几种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;缓存/数据存储。涉及大部分 redis 的数据类型， string，Hash ，Zset ，set 等&lt;/li&gt;
&lt;li&gt;队列。利用 list 类型的 push pop 操作。&lt;/li&gt;
&lt;li&gt;事件通知。利用 publish/subscribe 消息系统&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>密码哈希(Password Hashing)</title>
      <link>https://example.com/posts/2019-07-28-password-hashing-md/</link>
      <pubDate>Sun, 28 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/posts/2019-07-28-password-hashing-md/</guid>
      <description>&lt;p&gt;密码哈希（password hashing），是常用的密码管理技术。在 web 开发等工程实践中，账户密码等敏感信息通常不会明文存储到数据库，而是转换成一段哈希值存储。这样即使哪天数据库泄露了，用户的密码也不会一眼被识破。密码哈希有以下特点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;把任意长度的字符串，转换成固定长度的随机字符串。&lt;/li&gt;
&lt;li&gt;单向加密，不可逆转&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>翻译：JavaScript Promises 实现原理详解（JavaScript Promises ... In Wicked Detail）</title>
      <link>https://example.com/posts/2017-10-07-simplified-chinese-translation-of-javascript-promises-in-wicked-detail/</link>
      <pubDate>Sat, 07 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/posts/2017-10-07-simplified-chinese-translation-of-javascript-promises-in-wicked-detail/</guid>
      <description>&lt;blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;译按：&lt;/strong&gt;
&lt;em&gt;Promise 是异步编程的一种解决方案，让 javascript 可以从杂乱回调函数中解脱出来。后来 ES6 标准把 Promise 纳入其中，原生提供了 Promise 对象。Promise 也成为 ES6 最主要的特性之一。&lt;/em&gt;&lt;br&gt;
&lt;em&gt;网上介绍 promise 使用方法的文章很多，解释其原理却很少。这篇文章循序渐进地实现了一遍 promise，分析透彻，对了解 promise 的工作原理很有帮助。为了加深印象，所以把原文翻译了一遍。&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>搭建支持 Repo 的 Android 源码镜像（Repo 服务器）</title>
      <link>https://example.com/posts/2017-09-28-how-to-build-private-repo-server-for-android-source-code/</link>
      <pubDate>Thu, 28 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/posts/2017-09-28-how-to-build-private-repo-server-for-android-source-code/</guid>
      <description>方案厂商给了一份 Android 源码，没有 manifest.git 文件，不支持 Repo。为了基于这份代码搭建支持 Repo 的镜像服务器，断断续续摸索了两个星期，总算 hacking 成功。
本文用到的主要知识：
 shell script git 指令  一、关于 Repo 基于 Android 源码的开发工作大多要用到 Git 和 Repo。
Repo 是基于 Git 的仓库管理工具，支持同时管理许多个 Git 仓库。因为 Android 源码包含了许多个 Git 仓库，使用 Repo 可以简化许多工作。比如，使用一个 Repo 命令，就可以从多个不同的仓库下载文件，同步到你的计算机上。
搭建支持 Repo 的 Android 源码镜像，主要步骤如下：
 在服务器搭建 Git 托管服务器 在客户端安装配置好 Repo 在客户端创建 manifest/default.xml 并上传到 Git 服务器 将客户端 Android 源码上传到 Git 服务器 在其它获得 git 权限的客户端使用：Repo init; Repo sync  二、搭建 Git 服务器 搭建 Git 服务器这部分的内容相对独立，和 Repo 的关系不大，因此另外写了一篇文章：</description>
    </item>
    
    <item>
      <title>React &#43; Redux 应用的开发流程，以购物车为例</title>
      <link>https://example.com/posts/2017-09-02-react-redux-shopping-cart-demo/</link>
      <pubDate>Sat, 02 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/posts/2017-09-02-react-redux-shopping-cart-demo/</guid>
      <description>&lt;p&gt;&lt;strong&gt;项目的 repository：&lt;a href=&#34;https://github.com/chasecs/react-redux-shopping-cart-demo&#34;&gt;react-redux-shopping-cart-demo&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Redux 是最热门的 React 架构。介绍 Redux 的文章不少，官方文档的内容也非常丰富。&lt;br&gt;
本文根据个人对 Redux 的理解，提供一种和官方文档不一样的视角，阐述如何从零开始开发一个 React + Redux 应用。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>React Native 原生模块库打包指南</title>
      <link>https://example.com/posts/2017-08-09-react_native_packing_native_module_for_android_n_ios/</link>
      <pubDate>Wed, 09 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/posts/2017-08-09-react_native_packing_native_module_for_android_n_ios/</guid>
      <description>最终项目的 repository：react-native-baidu-ocr
原生模块（Native Module）的使用方式 React Native（下称RN）的官方文档介绍了Native Modules （下称“原生模块”）的使用方法，用于访问原生平台的 API。但是，文档里的方法并不适合直接在项目使用。
以 iOS 为例，如果按照 RN 文档的做法，你需要用 Xcode 项目的 .xcodeproj 文件，在里面新建一个 .m Objective-C File 和一个 .h Header File，然后在这两个文件里实现一个“RCTBridgeModule”协议的 Objective-C 类。
这样做的缺点我想到的有两个，一是，如果要实现的原生模块多了，.m 和 .h 也会递增，目录容易混乱难以管理；二是，这样的原生模块不容易复用，其它项目没法直接使用这个原生模块。
通行的做法是，将实现后原生模块打包好，然后存放在项目的node_modules的文件内，供 APP 调用。
打包原生模块的主要工作 打包一个原生模块，最主要的工作有两部分：
 安装该模块，即 &amp;ldquo;react-native link&amp;rdquo; 完成的工作。 写代码，对于iOS，是写一个实现了“RCTBridgeModule”协议的Objective-C类；对于Android，是写一个继承了 ReactContextBaseJavaModule的Java类。  所以，要打包 React Native 的原生模块，你最好有以下知识储备：
 有 RN 开发经验。如 RN 文档所说，原生模块是该框架的高级特性，当然是有一定的经验更易理解。 了解 Java 和 Objective-C， 至少能看懂这两种代码。  本文将以百度 OCR 的 iOS SDK &amp;amp; Android SDK 为例，介绍如何将其打包为一个名为 “react-native-baidu-ocr” 的 原生模块库（library），供 RN APP 调用。</description>
    </item>
    
  </channel>
</rss>